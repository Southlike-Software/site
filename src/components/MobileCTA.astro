---
const text = import.meta.env.PUBLIC_ANNOUNCEMENT_TEXT || "Founding Partner: 70% OFF vitalício — apenas 2 vagas";
const href = import.meta.env.PUBLIC_ANNOUNCEMENT_HREF || "#contato";
const enabled = (import.meta.env.PUBLIC_ANNOUNCEMENT_ENABLED || "true").toLowerCase() !== "false";
const deadline = import.meta.env.PUBLIC_ANNOUNCEMENT_DEADLINE || ""; // ISO string optional
---

<div id="mobile-cta" class="fixed inset-x-0 bottom-0 z-50 sm:hidden" role="region" aria-label="Aviso importante (mobile)">
  <div class="mx-auto max-w-7xl px-4 pb-[env(safe-area-inset-bottom)]">
    {enabled ? (
      <div class="relative mb-4 rounded-xl border border-purple-400/20 bg-gradient-to-r from-purple-600/20 via-purple-500/15 to-indigo-500/20 backdrop-blur supports-[backdrop-filter]:bg-purple-500/15">
        <button
          type="button"
          class="absolute right-2 top-2 z-10 inline-flex h-8 w-8 items-center justify-center rounded-full text-purple-200/90 hover:bg-purple-400/10 hover:text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-purple-400"
          aria-label="Fechar aviso"
          data-close-mobile-cta
        >
          <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
        </button>
        <a
          href={href}
          class="group block p-4 pr-12 text-purple-100"
          onclick="posthog?.capture('announcement_click', { href: this.getAttribute('href'), location: 'mobile_cta' })"
        >
          <div class="flex flex-col gap-1.5">
            <div class="flex items-center gap-2">
              <span class="inline-flex h-6 shrink-0 items-center rounded-full bg-purple-400/20 px-2 text-xs font-medium text-purple-200 ring-1 ring-inset ring-purple-400/30">Urgente</span>
              <span id="mobile-countdown" class="hidden shrink-0 rounded-full bg-purple-400/10 px-2 py-0.5 text-xs text-purple-100 ring-1 ring-inset ring-purple-400/30"></span>
            </div>
            <p class="text-sm leading-snug">{text}</p>
          </div>
        </a>
      </div>
    ) : (
      <div class="relative mb-4 rounded-xl border border-neutral-800/80 bg-neutral-900/70 backdrop-blur supports-[backdrop-filter]:bg-neutral-900/60">
        <button
          type="button"
          class="absolute right-2 top-2 z-10 inline-flex h-8 w-8 items-center justify-center rounded-full text-neutral-300/90 hover:bg-neutral-700/30 hover:text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-purple-400"
          aria-label="Fechar aviso"
          data-close-mobile-cta
        >
          <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
        </button>
        <div class="flex items-center gap-3 p-3 pr-12">
          <div class="min-w-0 flex-1">
            <p class="text-sm font-medium text-neutral-100">Pronto para escalar com IA?</p>
            <p class="text-xs text-neutral-400">Automatize captação e atendimento hoje mesmo.</p>
          </div>
          <a
            href="#contato"
            class="inline-flex w-auto items-center justify-center whitespace-nowrap rounded-lg bg-gradient-to-r from-purple-500 to-indigo-500 px-4 py-2 text-sm font-medium text-white shadow hover:from-purple-400 hover:to-indigo-400 focus:outline-none focus-visible:ring-2 focus-visible:ring-purple-400"
            aria-label="Ir para contato"
            onclick="posthog?.capture('cta_click', { location: 'mobile_cta', cta: 'contato' })"
          >Começar</a>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  try {
    const root = document.getElementById('mobile-cta');
    if (root) {
      const DISMISS_KEY = 'mobile_cta:dismissed_at';
      const DISMISS_TTL_MS = 6 * 60 * 60 * 1000; // 6 hours

      const isDismissed = () => {
        const raw = sessionStorage.getItem(DISMISS_KEY);
        const ts = raw ? parseInt(raw, 10) : NaN;
        return Number.isFinite(ts) && (Date.now() - ts) < DISMISS_TTL_MS;
      };

      const dismiss = () => {
        if (!root.isConnected) return;
        sessionStorage.setItem(DISMISS_KEY, String(Date.now()));
        root.remove();
        posthog?.capture?.('mobile_cta_dismiss');
      };

      if (isDismissed()) {
        root.remove();
      } else {
        const closeBtn = root.querySelector('[data-close-mobile-cta]');
        if (closeBtn) closeBtn.addEventListener('click', dismiss, { once: true });

        const anchor = root.querySelector('a[href="#contato"]');
        if (anchor) anchor.addEventListener('click', () => setTimeout(dismiss, 300));

        const contato = document.getElementById('contato');
        if ('IntersectionObserver' in window && contato) {
          const obs = new IntersectionObserver((entries) => {
            for (const entry of entries) {
              if (entry.isIntersecting) {
                obs.disconnect();
                dismiss();
                break;
              }
            }
          }, { threshold: 0.2, rootMargin: '0px 0px -30% 0px' });
          obs.observe(contato);
        }

        const deadlineStr = "${deadline}";
        if (deadlineStr) {
          const el = document.getElementById('mobile-countdown');
          if (el) {
            const target = new Date(deadlineStr).getTime();
            if (!Number.isFinite(target)) {
              el.remove();
            } else {
              let timer;
              const update = () => {
                const now = Date.now();
                const diff = Math.max(0, target - now);
                const h = Math.floor(diff / 36e5);
                const m = Math.floor((diff % 36e5) / 6e4);
                const s = Math.floor((diff % 6e4) / 1e3);
                el.textContent = `${"${"}${h.toString().padStart(2,'0')}:${m.toString().padStart(2,'0')}:${s.toString().padStart(2,'0')}`;
                if (diff <= 0 && timer) clearInterval(timer);
              };
              el.classList.remove('hidden');
              update();
              timer = setInterval(update, 1000);
            }
          }
        }
      }
    }
  } catch {}
</script>